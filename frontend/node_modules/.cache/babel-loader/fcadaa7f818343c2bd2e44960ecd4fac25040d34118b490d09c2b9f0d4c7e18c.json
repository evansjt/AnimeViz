{"ast":null,"code":"var _jsxFileName = \"/Users/evansjt/Documents/JHU/Data Visualization/Final Project/code/frontend/src/TemporalDataViz.jsx\",\n  _s = $RefreshSig$();\n/* eslint-disable no-undef */\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AvgAnimeMembershipPerYear() {\n  _s();\n  const [data, setData] = useState({\n    data: []\n  });\n  const [err, setErr] = useState('');\n  useEffect(() => {\n    var data = [];\n    function plotData(avgMemberData) {\n      for (let mediaType in avgMemberData) {\n        data.push({\n          x: avgMemberData[mediaType]['Years'],\n          y: avgMemberData[mediaType]['Average Members'],\n          showlegend: true,\n          name: mediaType === 'OVA' || mediaType === 'ONA' ? `${mediaType}*` : mediaType,\n          type: 'scatter',\n          fill: 'none',\n          mode: 'lines+markers',\n          line: {\n            width: 3\n          },\n          hovertemplate: `<b>${mediaType} - %{x}</b><br><i>Avg. members</i>: %{y}<extra></extra>`\n        });\n      }\n    }\n    const layout = {\n      title: 'Average Membership of Anime Media Released per Year',\n      xaxis: {\n        title: 'Year'\n      },\n      yaxis: {\n        title: '# of Avg. members'\n      },\n      legend: {\n        title: {\n          text: \"<b>Media Types<b>\",\n          font: {\n            size: 14\n          },\n          side: \"top\"\n        },\n        orientation: \"h\",\n        bgcolor: '#E2E2E2',\n        bordercolor: '#FFFFFF',\n        borderwidth: 2\n      },\n      annotations: [{\n        xref: 'paper',\n        yref: 'paper',\n        xanchor: 'left',\n        yanchor: 'bottom',\n        x: 0,\n        y: 1,\n        text: '<i>OVA* = Original video animation (direct-to-video anime)</i><br><i>ONA* = Original net animation (direct-to-internet anime)</i>',\n        font: {\n          size: 10\n        },\n        align: 'left',\n        showarrow: false\n      }]\n    };\n    axios.get(\"http://localhost:5000/avg_membership_per_yr\", {\n      crossdomain: true\n    }).then(res => {\n      plotData(res.data);\n      Plotly.newPlot('temporal-data-viz', data, layout);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"temporal-data-viz\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_s(AvgAnimeMembershipPerYear, \"W4S8/ska7lR2a2Ff64bF/D0nI1k=\");\n_c = AvgAnimeMembershipPerYear;\nexport default AvgAnimeMembershipPerYear;\nvar _c;\n$RefreshReg$(_c, \"AvgAnimeMembershipPerYear\");","map":{"version":3,"names":["React","useEffect","useState","axios","AvgAnimeMembershipPerYear","data","setData","err","setErr","plotData","avgMemberData","mediaType","push","x","y","showlegend","name","type","fill","mode","line","width","hovertemplate","layout","title","xaxis","yaxis","legend","text","font","size","side","orientation","bgcolor","bordercolor","borderwidth","annotations","xref","yref","xanchor","yanchor","align","showarrow","get","crossdomain","then","res","Plotly","newPlot"],"sources":["/Users/evansjt/Documents/JHU/Data Visualization/Final Project/code/frontend/src/TemporalDataViz.jsx"],"sourcesContent":["/* eslint-disable no-undef */\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction AvgAnimeMembershipPerYear() {\n    const [data, setData] = useState({data: []});\n    const [err, setErr] = useState('');\n\n    useEffect(() => {\n        var data = [];\n        function plotData(avgMemberData) {\n            for (let mediaType in avgMemberData) {\n                data.push({\n                    x: avgMemberData[mediaType]['Years'],\n                    y: avgMemberData[mediaType]['Average Members'],\n                    showlegend: true,\n                    name: mediaType === 'OVA' || mediaType === 'ONA' ? `${mediaType}*` : mediaType,\n                    type: 'scatter',\n                    fill: 'none',\n                    mode: 'lines+markers',\n                    line: {\n                        width: 3\n                    },\n                    hovertemplate: `<b>${mediaType} - %{x}</b><br><i>Avg. members</i>: %{y}<extra></extra>`\n                });\n            }\n        }\n\n        const layout = {\n            title: 'Average Membership of Anime Media Released per Year',\n            xaxis: {\n                title: 'Year'\n            },\n            yaxis: {\n                title: '# of Avg. members'\n            },\n            legend: {\n                title: {\n                    text: \"<b>Media Types<b>\",\n                    font: {\n                        size: 14\n                    },\n                    side: \"top\"\n                },\n                orientation: \"h\",\n                bgcolor: '#E2E2E2',\n                bordercolor: '#FFFFFF',\n                borderwidth: 2\n            },\n            annotations: [\n                {\n                    xref: 'paper',\n                    yref: 'paper',\n                    xanchor: 'left',\n                    yanchor: 'bottom',\n                    x: 0,\n                    y: 1,\n                    text: '<i>OVA* = Original video animation (direct-to-video anime)</i><br><i>ONA* = Original net animation (direct-to-internet anime)</i>',\n                    font: {\n                        size: 10\n                    },\n                    align: 'left',\n                    showarrow: false\n                }\n            ]\n        };\n\n        axios.get(\"http://localhost:5000/avg_membership_per_yr\", { crossdomain: true }).then(res => {\n            plotData(res.data);\n            Plotly.newPlot('temporal-data-viz', data, layout);\n        });\n    }, []);\n\n    return (\n        <div id=\"temporal-data-viz\"></div>\n    );\n}\n\nexport default AvgAnimeMembershipPerYear;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC;AAE1B,SAASC,yBAAyB,GAAG;EAAA;EACjC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC;IAACG,IAAI,EAAE;EAAE,CAAC,CAAC;EAC5C,MAAM,CAACE,GAAG,EAAEC,MAAM,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAElCD,SAAS,CAAC,MAAM;IACZ,IAAII,IAAI,GAAG,EAAE;IACb,SAASI,QAAQ,CAACC,aAAa,EAAE;MAC7B,KAAK,IAAIC,SAAS,IAAID,aAAa,EAAE;QACjCL,IAAI,CAACO,IAAI,CAAC;UACNC,CAAC,EAAEH,aAAa,CAACC,SAAS,CAAC,CAAC,OAAO,CAAC;UACpCG,CAAC,EAAEJ,aAAa,CAACC,SAAS,CAAC,CAAC,iBAAiB,CAAC;UAC9CI,UAAU,EAAE,IAAI;UAChBC,IAAI,EAAEL,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,KAAK,GAAI,GAAEA,SAAU,GAAE,GAAGA,SAAS;UAC9EM,IAAI,EAAE,SAAS;UACfC,IAAI,EAAE,MAAM;UACZC,IAAI,EAAE,eAAe;UACrBC,IAAI,EAAE;YACFC,KAAK,EAAE;UACX,CAAC;UACDC,aAAa,EAAG,MAAKX,SAAU;QACnC,CAAC,CAAC;MACN;IACJ;IAEA,MAAMY,MAAM,GAAG;MACXC,KAAK,EAAE,qDAAqD;MAC5DC,KAAK,EAAE;QACHD,KAAK,EAAE;MACX,CAAC;MACDE,KAAK,EAAE;QACHF,KAAK,EAAE;MACX,CAAC;MACDG,MAAM,EAAE;QACJH,KAAK,EAAE;UACHI,IAAI,EAAE,mBAAmB;UACzBC,IAAI,EAAE;YACFC,IAAI,EAAE;UACV,CAAC;UACDC,IAAI,EAAE;QACV,CAAC;QACDC,WAAW,EAAE,GAAG;QAChBC,OAAO,EAAE,SAAS;QAClBC,WAAW,EAAE,SAAS;QACtBC,WAAW,EAAE;MACjB,CAAC;MACDC,WAAW,EAAE,CACT;QACIC,IAAI,EAAE,OAAO;QACbC,IAAI,EAAE,OAAO;QACbC,OAAO,EAAE,MAAM;QACfC,OAAO,EAAE,QAAQ;QACjB3B,CAAC,EAAE,CAAC;QACJC,CAAC,EAAE,CAAC;QACJc,IAAI,EAAE,mIAAmI;QACzIC,IAAI,EAAE;UACFC,IAAI,EAAE;QACV,CAAC;QACDW,KAAK,EAAE,MAAM;QACbC,SAAS,EAAE;MACf,CAAC;IAET,CAAC;IAEDvC,KAAK,CAACwC,GAAG,CAAC,6CAA6C,EAAE;MAAEC,WAAW,EAAE;IAAK,CAAC,CAAC,CAACC,IAAI,CAACC,GAAG,IAAI;MACxFrC,QAAQ,CAACqC,GAAG,CAACzC,IAAI,CAAC;MAClB0C,MAAM,CAACC,OAAO,CAAC,mBAAmB,EAAE3C,IAAI,EAAEkB,MAAM,CAAC;IACrD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI;IAAK,EAAE,EAAC;EAAmB;IAAA;IAAA;IAAA;EAAA,QAAO;AAE1C;AAAC,GAxEQnB,yBAAyB;AAAA,KAAzBA,yBAAyB;AA0ElC,eAAeA,yBAAyB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}